#!/usr/local/bin/perl

use warnings;
use strict;
use DBI;
use Getopt::Long;

my @allowed_options = (
    'n=s',
    't=s',
    's!',
    'h!',
    'U=s',
    'sort=s',
    'type=s',
);

my %opt;
GetOptions(\%opt, @allowed_options);

my $db = shift @ARGV;
if (!$db) {
    print <<EOS;
Usage:  pg_du [-s] [-h] [-n schema] [-t table] [--sort=size(!)?|alpha(!)?] [--type=table|index] [-U user] database

-s        Summarize only, do not display each item
-h        Human readable sizes (K, M, G)
-n        Only for the given schema name space
-t        Only for the given table name
--sort=
   size   Sort by size Ascending
   size!  Sort by size Descending
   alpha  Sort by table name alphabetically Ascending
   alpha! Sort by table name alphabetically Descending
--type=
   table  Only show tables
   index  Only show indexes
-U        Connect as the given user 

EOS
    exit;
}

my $dbuser = $opt{U} || $db;
my $dbh;
eval {
    $dbh = DBI->connect("dbi:Pg:dbname=$db",$dbuser,'', {RaiseError => 1, PrintError => 1})
        or die "Cannot connect to database $db: $DBI::errstr";
};
if ($@ && $@ =~ /no password/) {
    use Term::ReadKey;
    print "Password needed:";
    ReadMode 'noecho';
    my $pass = ReadLine();
    chomp $pass;
    ReadMode 'normal';
    eval {
        $dbh = DBI->connect("dbi:Pg:dbname=$db",$dbuser,$pass)
        or die "Cannot connect to database $db: $DBI::errstr";
    };
}
die $@  if ($@);

my $db_dir = $dbh->selectrow_array("SELECT oid FROM pg_database WHERE datname = ?", undef, $db);
my $database_root = "/var/lib/pgsql/data/base/$db_dir";

my @values = ($db);

my $specific_schema = '';
if ($opt{n}) {
    $specific_schema = "AND ns.nspname = ?";
    push @values, $opt{n};
}
my $specific_table = '';
if ($opt{t}) {
    $specific_table = "AND c.relname = ?";
    push @values, $opt{t};
}

$opt{$_} ||= ''  foreach (qw/ type sort /);

my $relkind = ($opt{type} eq 'table') ? " = 'r'" :
              ($opt{type} eq 'index') ? " = 'i'" :
              " <> 'v'";

my $order_by = ($opt{sort} eq 'alpha!') ? ' c.relname DESC, ns.nspname' :
               ($opt{sort} eq 'alpha')  ? 'c.relname, ns.nspname' :
               'ns.nspname, c.relname';

my $query = <<EOQ;
SELECT c.relkind, ns.nspname, c.relname,
      (c.relpages * 8) as size_kb, c.relfilenode
FROM pg_class c
JOIN pg_database d ON c.relowner = d.datdba
JOIN pg_namespace ns ON c.relnamespace = ns.oid
WHERE d.datname = ?
$specific_schema
$specific_table
AND c.relkind $relkind
ORDER BY $order_by
EOQ

my $sth = $dbh->prepare($query);
$sth->execute(@values);

my @data_to_display;
my ($name_column_width, $size_column_width) = (0,0);

my $total_size = 0;
my $can_read_file_sys = 1;
while (my $row = $sth->fetchrow_hashref) {
    my $file = "$database_root/". $row->{relfilenode};
    my $size = ($can_read_file_sys && -f $file && -r $file) ? -s $file : undef;
	if ($can_read_file_sys && ! defined $size) {
		print "Not able to read disk siz (permission?). Using Postgres' stats for guessing file sizes.\n";
		$can_read_file_sys = 0;
	}
	$size = $row->{size_kb} * 1024  unless ($can_read_file_sys);

    $total_size += $size;
    next  if ($opt{s});
    my $orig_size = $size;
    if ($opt{h}) {
	my $unit = ' bytes';
	if ($size > 1024) {
	    $size = int($size / 1024 * 100) / 100;
	    $unit = 'K';
	}
	if ($size > 1024) {
	    $size = int($size / 1024 * 100) / 100;
	    $unit = 'M';
	}
	if ($size > 1024) {
	    $size = int($size / 1024 * 100) / 100;
	    $unit = 'G';
	}
	$size .= $unit;
    }

    my $name = $row->{nspname} .'.'. $row->{relname};
    push @data_to_display, [$orig_size, $size, $name, $row->{relkind}];
    $name_column_width = length($name) if ($name_column_width < length($name));
    $size_column_width = length($size) if ($size_column_width < length($size));
}

$sth->finish;

if ($opt{sort} eq 'size' || $opt{sort} eq 'size!') {
    my @sorted = sort { $opt{sort} =~ /\!$/ ? $b->[0] <=> $a->[0] : $a->[0] <=> $b->[0] } @data_to_display;
    @data_to_display =  @sorted;
}


# Now print the data
unless ($opt{s}) {
    foreach (@data_to_display) {
	printf '%'. $size_column_width .'s   %-'. $name_column_width ."s   %s\n", @$_[1..3];
    }
}


if ($opt{h}) {
    my $unit = ' bytes';
    if ($total_size > 1024) {
	$total_size = int($total_size / 1024 * 100) / 100;
	$unit = 'K';
    }
    if ($total_size > 1024) {
	$total_size = int($total_size / 1024 * 100) / 100;
	$unit = 'M';
    }
    if ($total_size > 1024) {
	$total_size = int($total_size / 1024 * 100) / 100;
	$unit = 'G';
    }
    $total_size .= $unit;
}

print "Not able to read disk sizes (permissions?). Using Postgres' stats for guessing file sizes.\n"  unless ($can_read_file_sys);
print "Total: $total_size\n";


$dbh->disconnect;

